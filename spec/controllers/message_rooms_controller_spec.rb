require 'rails_helper'
require_relative '../support/devise'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe MessageRoomsController, type: :controller do

  let(:valid_attributes) {
    {
      title: "Test Title",
      blurb: "Type whatever you want! It's just a test",
      creator_id: 1
    }
  }

  let(:attributes_missing_creator) {
    {
      title: "Test Title",
      blurb: "Type whatever you want! It's just a test",
    }
  }

  let(:attributes_missing_title) {
    {
      title: "",
      blurb: "Type whatever you want! It's just a test",
      creator_id: 1
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MessageRoomsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    login_user
    it "returns a success response" do
      MessageRoom.create valid_attributes
      get :index, params: {id: 1}
      expect(response).to be_successful
    end

    it "assigns my rooms" do
      get :index
      expect(assigns(:my_rooms)).to eq({})
    end

    it "assigns all rooms" do
      get :index
      expect(assigns(:all_message_rooms)).to eq([])
    end

  end

  describe "GET #show" do
    login_user
    it "returns a success response" do
      message_room = MessageRoom.create! valid_attributes
      get :show, params: {id: message_room.to_param}
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    login_user
    it "returns a success response" do
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    login_user
    it "returns a success response" do
      message_room = MessageRoom.create! valid_attributes
      get :edit, params: {id: message_room.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      login_user
      it "creates a new MessageRoom" do
        expect {
          post :create, params: {message_room: valid_attributes}
        }.to change(MessageRoom, :count).by(1)
      end

      it "redirects to the created message_room" do
        post :create, params: {message_room: valid_attributes}
        expect(response).to redirect_to(MessageRoom.last)
      end
    end

    context "with invalid params" do
      login_user
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {message_room: attributes_missing_creator}
        expect(response).to be_successful
      end
    end
  end

  describe "POST #subscribe" do
    login_user
    it "creates subscriber with post call to subscribe method" do
      message_room = MessageRoom.create! valid_attributes
      post :subscribe, params: {user_id: @user.id, message_room_id: message_room.id}, :format => 'js'
      expect(response).to be_successful
      expect(User.all.count).to eq(1)
      expect(MessageRoom.all.count).to eq(1)
      expect(Subscription.all.count).to eq(1)
    end
  end

  describe "POST #ajax_message" do
    login_user
    it "broadcasts the created message to the WORLD" do
      message_room = MessageRoom.create! valid_attributes
      expect {post :ajax_message, params: { body: 'Cool!', user_id: @user.id, id: message_room.id }}.to have_broadcasted_to("messages").with(message: 'Cool!')
    end
  end

end
